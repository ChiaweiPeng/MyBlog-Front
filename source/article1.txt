## 入口函数区别：
1.用jquery不能取到DOM元素的宽高

原生JS和jQuery的入口函数的加载模式不同；
原生JS会等到DOM元素加载完毕，并且图片也加载完毕才执行；
jQuery会等到DOM元素加载完毕，但不会等到图片加载完毕就已执行

原生JS编写多个入口函数会覆盖前面的；
jQuery编写多个入口函数后面的不会覆盖前面的

## 入口函数推荐写法：
    $(function(){
        console.log('hellow world')
    })

## 解决$符号冲突问题：
1.释放$符号使用权 jQuery.noConflict(),
 在其他代码编写前释放，释放后就不能再用$,改为使用jQuery
2.自定义访问符号:

     var pjw = jQuery.noConflict();
                pjw(function(){
                })

## $()/jQuery()  就代表jQuery的核心函数
1.接收一个函数，作为核心函数
2.接收一个字符串
        2.1 接收一个字符串选择器
        返回一个jQuery对象，对象中保存了找到的DOM元素

        2.2 接收一个字符串代码片段
        返回一个jQuery对象，对象中保存了创建的DOM元素

        2.3 接收一个DOM元素
        会被包装成jQuery对象返回

## 如何辨别真伪数组？

## 什么是对象的原型对象？

## jQuery本质上是一个匿名函数
    (function(window,undefined){
    })(window);
    
    ### 匿名函数：立即执行的函数
    function test(){

    }
    test()
     ==
    (function test(){

    })()

## parent的方法和parent选择器有什么区别？

## remove与detach方法的区别？
两者的共同之处在于都不会把匹配的元素从jquery对象中删除。

不同之处在于用remove()删除的元素，除了元素被保留，其他的在这个元素上的绑定事件等都会被移除；
但是detach()方法不会移除这个元素上的方法或者是附加数据。

## replaceWith与replaceAll 区别？
1.$(target).replaceWith(newContent)
2.$(newContent).replaceAll(target)

replaceWith()被什么替换，replaceAll()是替换什么。

共同注意点：
1.两者返回值都为jQuery类型，与被替换掉的节点关联的所有数据和事件处理器也将同时被移除
2.如果当前jQuery对象匹配的某个元素是页面上的元素，则该元素将从原来位置上消失，这相当于一个移动操作，而不是一个复制操作。

## clone(false/true) 复制元素
浅复制：clone(false)：浅复制,只复制元素,不复制元素事件
深复制：clone(true)：深复制,不仅复制元素,而且复制元素事件

## jQuery里添加html代码可以使用ES6的模板字符串
ES6 模板字符串：
es6的模板字符串``的写法，用反引号（`）标识；
用${ }拼接变量，还可以嵌套使用，模板字符串中还可以嵌套另一个模板字符串；
写循环，用<%...%>放置js代码，用<%=...%>输出js表达式

## 字符串里加空格：+"&nbsp;&nbsp"+

## 在别的函数上调用事件委托，会引发多次触发



